const inputSlider = document.querySelector("[data-lengthSlider]");
const lengthDisplay = document.querySelector("[data-lengthNumber]");

const passwordDisplay = document.querySelector("[data-passwordDisplay]");
const copyBtn = document.querySelector("[data-copy]");
const copyMsg = document.querySelector("[data-copyMsg]");
const uppercaseCheck = document.querySelector("#uppercase");
const lowercaseCheck = document.querySelector("#lowercase");
const numbersCheck = document.querySelector("#numbers");
const symbolsCheck = document.querySelector("#symbols");
const indicator = document.querySelector("[data-indicator]");
const generateBtn = document.querySelector(".generateButton");
const allCheckBox = document.querySelectorAll("input[type=checkbox]");
const symbols = "`~!@#$%^&*()_-+}]{[|\':;?/>.<,";

let password ="";
let passwordLength = 10;
let checkCount = 0;
handleSlider();
// set strength circle color to grey
setIndicator("#ccc");

// set passwordLength according to slider
function handleSlider(){
     inputSlider.value = passwordLength;
     lengthDisplay.innerText = passwordLength;
}

function setIndicator(color){
      indicator.style.backgroundColor=color;
      indicator.style.boxShadow = `0px 0px 12px 1px ${color}`;
}

// this function we re use again in all (uppercase , lowercase , numbers , symbols)
function getRandomInteger(min,max){
     return Math.floor(Math.random() * (max-min)) + min;
}

function generateRandomNumber(){
    return getRandomInteger(0,9);
}

function generateLowerCase(){
    return String.fromCharCode(getRandomInteger(97,123));
}

function generateUpperCase(){
     return String.fromCharCode(getRandomInteger(65,91));
}

function generateSymbols(){
       const randomNum = getRandomInteger(0,symbols.length);
       return symbols.charAt(randomNum);
}

// we can change this according to our needs
function calculateStrength(){
    let hasUpper = false;
    let hasLower = false;
    let hasNum = false;
    let hasSym = false;
    if (uppercaseCheck.checked) hasUpper = true;
    if (lowercaseCheck.checked) hasLower = true;
    if (numbersCheck.checked) hasNum = true;
    if (symbolsCheck.checked) hasSym = true;
  
    if (hasUpper && hasLower && (hasNum || hasSym) && passwordLength >= 8) {
      setIndicator("#0f0");
    } else if (
      (hasLower || hasUpper) &&
      (hasNum || hasSym) &&
      passwordLength >= 6
    ) {
      setIndicator("#ff0");
    } else {
      setIndicator("#f00");
    }
}

// this function runs copy the password , generated by this

async function copyContent(){
    try{
        // well this return a promise
        await navigator.clipboard.writeText(passwordDisplay.value);
        copyMsg.innerText = "copied";
    }

    catch(e){
    copyMsg.innerText = "Failed";
    }
    // this is for css
    copyMsg.classList.add("active");
    
    // show only for 2 second
    setTimeout( () => {
        copyMsg.classList.remove("active");
    },2000);
}

// this function shows how many checkboxes are checked

function handleCheckBoxChange(){
    checkCount = 0;
    allCheckBox.forEach((checkbox)=> {
        if(checkbox.checked) 
            checkCount++;
    });

    // special case where all 4 checked but password length is small then give the 4 length password
    if(passwordLength < checkCount ){
        passwordLength = checkCount;
        handleSlider();
    }
}

// this code shuffle the whole password , we can change this code 

function shufflePassword(array){
  // Fisher Yates Method
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    const temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }
let str = "";
array.forEach((el) => (str += el));
return str;
}

allCheckBox.forEach((checkbox) => {
    checkbox.addEventListener('change' , handleCheckBoxChange);
});

inputSlider.addEventListener('input', (e) => {
    passwordLength = e.target.value;
    handleSlider();
});

copyBtn.addEventListener('click',()=>{
    if(passwordDisplay.value){
        copyContent();
    }
});;

generateBtn.addEventListener('click' , () =>{
 // none of the checkbox are selected
 if(checkCount<=0)return;

 if(passwordLength < checkCount){
    passwordLength = checkCount;
    handleSlider();
 }

 // now the to find new password

 // remove old password
 password = "";

 // put the stuff mentioned by checkbox


let funcArr = [];

if(uppercaseCheck.checked){
    funcArr.push(generateUpperCase);
}
if(lowercaseCheck.checked){
    funcArr.push(generateLowerCase);
}
if(numbersCheck.checked){
    funcArr.push(generateRandomNumber);
}
if(symbolsCheck.checked){
    funcArr.push(generateSymbols);
}

// compulsory addition where at least one checked thing should be in password

for(let i=0 ; i < funcArr.length; i++){
    password = password + funcArr[i]();
}

// This is for remaining addition

for(let i = 0; i<passwordLength - funcArr.length; i++){
    let randomIndex = getRandomInteger (0 , funcArr.length);
    password = password + funcArr[randomIndex]();
}

// password shuffle now

password = shufflePassword(Array.from(password));

// showing password in UI
passwordDisplay.value = password;

// calculate strength
calculateStrength();
});